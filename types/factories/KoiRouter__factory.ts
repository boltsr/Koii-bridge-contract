/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { KoiRouter, KoiRouterInterface } from "../KoiRouter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_koiToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_vault",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_bridgeFee",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "arAddress",
        type: "string",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    inputs: [],
    name: "bridgeFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "arAddress",
        type: "string",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "koiToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_bridgeFee",
        type: "uint256",
      },
    ],
    name: "setBridgeFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "vault",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161064238038061064283398101604081905261002f9161008f565b600080546001600160a01b039485166001600160a01b03199182161790915560018054939094169281169290921790925560028054909116331790556003556100ca565b80516001600160a01b038116811461008a57600080fd5b919050565b6000806000606084860312156100a3578283fd5b6100ac84610073565b92506100ba60208501610073565b9150604084015190509250925092565b610569806100d96000396000f3fe6080604052600436106100705760003560e01c80638c567e881161004e5780638c567e88146100ca5780638da5cb5b146100ec578063998cdf8314610101578063fbfa77cf1461012157610070565b80633a8cbc38146100755780633ccfd60b1461008a57806382b12dd71461009f575b600080fd5b6100886100833660046102f2565b610136565b005b34801561009657600080fd5b5061008861022a565b3480156100ab57600080fd5b506100b4610290565b6040516100c1919061052a565b60405180910390f35b3480156100d657600080fd5b506100df610296565b6040516100c191906103a6565b3480156100f857600080fd5b506100df6102a5565b34801561010d57600080fd5b5061008861011c36600461038e565b6102b4565b34801561012d57600080fd5b506100df6102e3565b6003543410156101615760405162461bcd60e51b8152600401610158906104cd565b60405180910390fd5b6001546040517ff242432a0000000000000000000000000000000000000000000000000000000081526001600160a01b038088169263f242432a926101b0923392169089908990600401610412565b600060405180830381600087803b1580156101ca57600080fd5b505af11580156101de573d6000803e3d6000fd5b505050507f907ff0b577abac3b4513f9292baa8233f05fb09942f8ee9a6b676216d557598a33868686868660405161021b969594939291906103ba565b60405180910390a15050505050565b6002546001600160a01b031633146102545760405162461bcd60e51b815260040161015890610470565b6002546040516001600160a01b03909116904780156108fc02916000818181858888f1935050505015801561028d573d6000803e3d6000fd5b50565b60035481565b6000546001600160a01b031681565b6002546001600160a01b031681565b6002546001600160a01b031633146102de5760405162461bcd60e51b815260040161015890610470565b600355565b6001546001600160a01b031681565b600080600080600060808688031215610309578081fd5b85356001600160a01b038116811461031f578182fd5b94506020860135935060408601359250606086013567ffffffffffffffff80821115610349578283fd5b818801915088601f83011261035c578283fd5b81358181111561036a578384fd5b89602082850101111561037b578384fd5b9699959850939650602001949392505050565b60006020828403121561039f578081fd5b5035919050565b6001600160a01b0391909116815260200190565b60006001600160a01b03808916835280881660208401525085604083015284606083015260a060808301528260a0830152828460c084013781830160c090810191909152601f909201601f1916010195945050505050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a0608082018190526002908201527f307800000000000000000000000000000000000000000000000000000000000060c082015260e00190565b6020808252602e908201527f546869732063616e206f6e6c792062652063616c6c656420627920746865206360408201527f6f6e7472616374206f776e657221000000000000000000000000000000000000606082015260800190565b60208082526027908201527f45746865722073656e74206973206c657373207468616e20746865206272696460408201527f6765206665657300000000000000000000000000000000000000000000000000606082015260800190565b9081526020019056fea26469706673582212200cadc77e0ab5a4ce462bbfbec6a383ee722b9a8af0314e35995d5493d2da629364736f6c63430008000033";

export class KoiRouter__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _koiToken: string,
    _vault: string,
    _bridgeFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<KoiRouter> {
    return super.deploy(
      _koiToken,
      _vault,
      _bridgeFee,
      overrides || {}
    ) as Promise<KoiRouter>;
  }
  getDeployTransaction(
    _koiToken: string,
    _vault: string,
    _bridgeFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _koiToken,
      _vault,
      _bridgeFee,
      overrides || {}
    );
  }
  attach(address: string): KoiRouter {
    return super.attach(address) as KoiRouter;
  }
  connect(signer: Signer): KoiRouter__factory {
    return super.connect(signer) as KoiRouter__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): KoiRouterInterface {
    return new utils.Interface(_abi) as KoiRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): KoiRouter {
    return new Contract(address, _abi, signerOrProvider) as KoiRouter;
  }
}
